{"mappings":"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","sources":["app.js"],"sourcesContent":["\"use strict\";\n\n// getCoordinates()\n// Demande au navigateur de détecter la position actuelle de l'utilisateur et retourne une Promise\nconst getCoordinates = () => {\n  return new Promise((res, rej) =>\n    navigator.geolocation.getCurrentPosition(res, rej)\n  );\n};\n\n// getPosition()\n// Résout la promesse de getCoordinates et retourne un objet {lat: x, long: y}\nconst getPosition = async () => {\n  const position = await getCoordinates();\n  return {\n    lat: position.coords.latitude,\n    long: position.coords.longitude\n  };\n};\n\n// renderWeather(min, max)\n// Affiche la valeu des deux paramêtres dans le widget de météo\nconst renderWeather = (min, max) => {\n  document.querySelector(\".min\").textContent = `${min}°C`;\n  document.querySelector(\".max\").textContent = `${max}°C`;\n  return;\n};\n\n// parseStationData(rawData)\n// Reçoit la réponse JSON de l'API Transport/stationboard et recrache un objet\n// ne contenant que les informations pertinentes.\nconst parseStationData = (rawData) => {\n  const { stationboard } = rawData;\n  const departures = stationboard.map((el) => {\n    const date = new Date(el.stop.departure);\n    const hours = date.getHours();\n    const minutes = date.getMinutes();\n    const formattedHours = date.getHours() < 10 ? \"0\" + hours : hours;\n    const formattedMinutes = date.getMinutes() < 10 ? \"0\" + minutes : minutes;\n    return {\n      departure: `${formattedHours}:${formattedMinutes}`,\n      destination: el.to,\n      category: el.category\n    };\n  });\n  return {\n    station: rawData.station.name,\n    departures\n  };\n};\n\n// renderTrain(train)\n// Affiche une ligne de départ dans le widget CFF.\nconst renderTrain = (train) => {\n  const board = document.querySelector(\".departures\");\n  const html = `\n    <article>\n        <div class=\"time\">${train.departure}</div>\n        <div class=\"category\" data-category=\"${train.category}\">${train.category}</div>\n        <div class=\"destination\">${train.destination}</div>\n    </article>\n    `;\n  board.insertAdjacentHTML(\"beforeend\", html);\n  return;\n};\n\n// renderStationName(station)\n// Affiche le mot passé en paramettre dans le widget CFF. \nconst renderStationName = (station) => {\n  const stationElement = document.querySelector(\".departures header p\");\n  stationElement.textContent = station;\n};\n\n// Votre code peut se trouver dans cette fonction. L'appel vers getPosition est\n// déjà implémenté. Si vous jetez un coup d'oeil à votre console vous verrez un objet\n// contenant votre position.\nconst getDashboardInformation = () => {\n  getPosition().then((res) => {\n    console.log(res);\n    fetch(`https://api.open-meteo.com/v1/forecast?latitude=${res.lat}&longitude=${res.long}&daily=apparent_temperature_max,apparent_temperature_min&timezone=auto`)\n      .then((reponse) => reponse.json())\n      .then((data) => renderWeather(data.daily.apparent_temperature_min[0], data.daily.apparent_temperature_max[0]))\n    fetch(`http://transport.opendata.ch/v1/locations?x=${res.lat}&y=${res.long}&type=station`)\n      .then((reponse) => reponse.json())\n      .then((data) => {\n        const result = data.stations.filter((el) => el.icon === \"train\");\n\n        if (!result[0]) throw new Error(\"pas de train\");\n\n        const station = result[0].name;\n        renderStationName(station)\n        return fetch(`http://transport.opendata.ch/v1/stationboard?station=${station}&limit=5`)\n      })\n      .then((reponse) => reponse.json())\n      .then((data) => {\n        parseStationData(data).departures.forEach(element => {\n          renderTrain(element);\n        })\n      })\n      .catch(err => {\n        renderStationName(err.message);\n      })\n  })\n};\n\ngetDashboardInformation();\n\n\n"],"names":[],"version":3,"file":"index.7c0ccee6.js.map","sourceRoot":"/__parcel_source_root/"}