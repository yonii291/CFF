{"mappings":"ACIA,MAAM,EAAiB,IACd,IAAI,QAAQ,CAAC,EAAK,IACvB,UAAU,WAAW,CAAC,kBAAkB,CAAC,EAAK,IAgB5C,EAAgB,CAAC,EAAK,KAC1B,SAAS,aAAa,CAAC,QAAQ,WAAW,CAAG,CAAC,EAAE,EAAI,KAAE,CAAC,CACvD,SAAS,aAAa,CAAC,QAAQ,WAAW,CAAG,CAAC,EAAE,EAAI,KAAE,CAAC,AAEzD,EAKM,EAAmB,AAAC,IACxB,GAAM,CAAE,aAAA,CAAY,CAAE,CAAG,EACnB,EAAa,EAAa,GAAG,CAAC,AAAC,IACnC,IAAM,EAAO,IAAI,KAAK,EAAG,IAAI,CAAC,SAAS,EACjC,EAAQ,EAAK,QAAQ,GACrB,EAAU,EAAK,UAAU,GACzB,EAAiB,AAAkB,GAAlB,EAAK,QAAQ,GAAU,IAAM,EAAQ,EACtD,EAAmB,AAAoB,GAApB,EAAK,UAAU,GAAU,IAAM,EAAU,EAClE,MAAO,CACL,UAAW,CAAC,EAAE,EAAe,CAAC,EAAE,EAAiB,CAAC,CAClD,YAAa,EAAG,EAAE,CAClB,SAAU,EAAG,QAAQ,AACvB,CACF,GACA,MAAO,CACL,QAAS,EAAQ,OAAO,CAAC,IAAI,CAC7B,WAAA,CACF,CACF,EAIM,EAAc,AAAC,IACnB,IAAM,EAAQ,SAAS,aAAa,CAAC,eAC/B,EAAO,CAAC;;0BAEU,EAAE,EAAM,SAAS,CAAC;6CACC,EAAE,EAAM,QAAQ,CAAC,EAAE,EAAE,EAAM,QAAQ,CAAC;iCAChD,EAAE,EAAM,WAAW,CAAC;;IAEjD,CAAC,CACH,EAAM,kBAAkB,CAAC,YAAa,EAExC,EAIM,EAAoB,AAAC,IAEzB,AADuB,SAAS,aAAa,CAAC,wBAC/B,WAAW,CAAG,CAC/B,EAME,AAjEkB,CAAA,UAClB,IAAM,EAAW,MAAM,IACvB,MAAO,CACL,IAAK,EAAS,MAAM,CAAC,QAAQ,CAC7B,KAAM,EAAS,MAAM,CAAC,SAAS,AACjC,CACF,CAAA,IA2DgB,IAAI,CAAC,AAAC,IAClB,QAAQ,GAAG,CAAC,GACZ,MAAM,CAAC,gDAAgD,EAAE,EAAI,GAAG,CAAC,WAAW,EAAE,EAAI,IAAI,CAAC,sEAAsE,CAAC,EAC3J,IAAI,CAAC,AAAC,GAAY,EAAQ,IAAI,IAC9B,IAAI,CAAC,AAAC,GAAS,EAAc,EAAK,KAAK,CAAC,wBAAwB,CAAC,EAAE,CAAE,EAAK,KAAK,CAAC,wBAAwB,CAAC,EAAE,GAC9G,MAAM,CAAC,4CAA4C,EAAE,EAAI,GAAG,CAAC,GAAG,EAAE,EAAI,IAAI,CAAC,aAAa,CAAC,EACtF,IAAI,CAAC,AAAC,GAAY,EAAQ,IAAI,IAC9B,IAAI,CAAC,AAAC,IACL,IAAM,EAAS,EAAK,QAAQ,CAAC,MAAM,CAAC,AAAC,GAAO,AAAY,UAAZ,EAAG,IAAI,EAEnD,GAAI,CAAC,CAAM,CAAC,EAAE,CAAE,MAAM,AAAI,MAAM,gBAEhC,IAAM,EAAU,CAAM,CAAC,EAAE,CAAC,IAAI,CAE9B,OADA,EAAkB,GACX,MAAM,CAAC,qDAAqD,EAAE,EAAQ,QAAQ,CAAC,CACxF,GACC,IAAI,CAAC,AAAC,GAAY,EAAQ,IAAI,IAC9B,IAAI,CAAC,AAAC,IACL,EAAiB,GAAM,UAAU,CAAC,OAAO,CAAC,AAAA,IACxC,EAAY,EACd,EACF,GACC,KAAK,CAAC,AAAA,IACL,EAAkB,EAAI,OAAO,CAC/B,EACJ","sources":["<anon>","app.js"],"sourcesContent":["\"use strict\";\n// getCoordinates()\n// Demande au navigateur de détecter la position actuelle de l'utilisateur et retourne une Promise\nconst getCoordinates = ()=>{\n    return new Promise((res, rej)=>navigator.geolocation.getCurrentPosition(res, rej));\n};\n// getPosition()\n// Résout la promesse de getCoordinates et retourne un objet {lat: x, long: y}\nconst getPosition = async ()=>{\n    const position = await getCoordinates();\n    return {\n        lat: position.coords.latitude,\n        long: position.coords.longitude\n    };\n};\n// renderWeather(min, max)\n// Affiche la valeu des deux paramêtres dans le widget de météo\nconst renderWeather = (min, max)=>{\n    document.querySelector(\".min\").textContent = `${min}\\xb0C`;\n    document.querySelector(\".max\").textContent = `${max}\\xb0C`;\n    return;\n};\n// parseStationData(rawData)\n// Reçoit la réponse JSON de l'API Transport/stationboard et recrache un objet\n// ne contenant que les informations pertinentes.\nconst parseStationData = (rawData)=>{\n    const { stationboard } = rawData;\n    const departures = stationboard.map((el)=>{\n        const date = new Date(el.stop.departure);\n        const hours = date.getHours();\n        const minutes = date.getMinutes();\n        const formattedHours = date.getHours() < 10 ? \"0\" + hours : hours;\n        const formattedMinutes = date.getMinutes() < 10 ? \"0\" + minutes : minutes;\n        return {\n            departure: `${formattedHours}:${formattedMinutes}`,\n            destination: el.to,\n            category: el.category\n        };\n    });\n    return {\n        station: rawData.station.name,\n        departures\n    };\n};\n// renderTrain(train)\n// Affiche une ligne de départ dans le widget CFF.\nconst renderTrain = (train)=>{\n    const board = document.querySelector(\".departures\");\n    const html = `\n    <article>\n        <div class=\"time\">${train.departure}</div>\n        <div class=\"category\" data-category=\"${train.category}\">${train.category}</div>\n        <div class=\"destination\">${train.destination}</div>\n    </article>\n    `;\n    board.insertAdjacentHTML(\"beforeend\", html);\n    return;\n};\n// renderStationName(station)\n// Affiche le mot passé en paramettre dans le widget CFF. \nconst renderStationName = (station)=>{\n    const stationElement = document.querySelector(\".departures header p\");\n    stationElement.textContent = station;\n};\n// Votre code peut se trouver dans cette fonction. L'appel vers getPosition est\n// déjà implémenté. Si vous jetez un coup d'oeil à votre console vous verrez un objet\n// contenant votre position.\nconst getDashboardInformation = ()=>{\n    getPosition().then((res)=>{\n        console.log(res);\n        fetch(`https://api.open-meteo.com/v1/forecast?latitude=${res.lat}&longitude=${res.long}&daily=apparent_temperature_max,apparent_temperature_min&timezone=auto`).then((reponse)=>reponse.json()).then((data)=>renderWeather(data.daily.apparent_temperature_min[0], data.daily.apparent_temperature_max[0]));\n        fetch(`http://transport.opendata.ch/v1/locations?x=${res.lat}&y=${res.long}&type=station`).then((reponse)=>reponse.json()).then((data)=>{\n            const result = data.stations.filter((el)=>el.icon === \"train\");\n            if (!result[0]) throw new Error(\"pas de train\");\n            const station = result[0].name;\n            renderStationName(station);\n            return fetch(`http://transport.opendata.ch/v1/stationboard?station=${station}&limit=5`);\n        }).then((reponse)=>reponse.json()).then((data)=>{\n            parseStationData(data).departures.forEach((element)=>{\n                renderTrain(element);\n            });\n        }).catch((err)=>{\n            renderStationName(err.message);\n        });\n    });\n};\ngetDashboardInformation();\n\n//# sourceMappingURL=index.6a68993a.js.map\n","\"use strict\";\n\n// getCoordinates()\n// Demande au navigateur de détecter la position actuelle de l'utilisateur et retourne une Promise\nconst getCoordinates = () => {\n  return new Promise((res, rej) =>\n    navigator.geolocation.getCurrentPosition(res, rej)\n  );\n};\n\n// getPosition()\n// Résout la promesse de getCoordinates et retourne un objet {lat: x, long: y}\nconst getPosition = async () => {\n  const position = await getCoordinates();\n  return {\n    lat: position.coords.latitude,\n    long: position.coords.longitude\n  };\n};\n\n// renderWeather(min, max)\n// Affiche la valeu des deux paramêtres dans le widget de météo\nconst renderWeather = (min, max) => {\n  document.querySelector(\".min\").textContent = `${min}°C`;\n  document.querySelector(\".max\").textContent = `${max}°C`;\n  return;\n};\n\n// parseStationData(rawData)\n// Reçoit la réponse JSON de l'API Transport/stationboard et recrache un objet\n// ne contenant que les informations pertinentes.\nconst parseStationData = (rawData) => {\n  const { stationboard } = rawData;\n  const departures = stationboard.map((el) => {\n    const date = new Date(el.stop.departure);\n    const hours = date.getHours();\n    const minutes = date.getMinutes();\n    const formattedHours = date.getHours() < 10 ? \"0\" + hours : hours;\n    const formattedMinutes = date.getMinutes() < 10 ? \"0\" + minutes : minutes;\n    return {\n      departure: `${formattedHours}:${formattedMinutes}`,\n      destination: el.to,\n      category: el.category\n    };\n  });\n  return {\n    station: rawData.station.name,\n    departures\n  };\n};\n\n// renderTrain(train)\n// Affiche une ligne de départ dans le widget CFF.\nconst renderTrain = (train) => {\n  const board = document.querySelector(\".departures\");\n  const html = `\n    <article>\n        <div class=\"time\">${train.departure}</div>\n        <div class=\"category\" data-category=\"${train.category}\">${train.category}</div>\n        <div class=\"destination\">${train.destination}</div>\n    </article>\n    `;\n  board.insertAdjacentHTML(\"beforeend\", html);\n  return;\n};\n\n// renderStationName(station)\n// Affiche le mot passé en paramettre dans le widget CFF. \nconst renderStationName = (station) => {\n  const stationElement = document.querySelector(\".departures header p\");\n  stationElement.textContent = station;\n};\n\n// Votre code peut se trouver dans cette fonction. L'appel vers getPosition est\n// déjà implémenté. Si vous jetez un coup d'oeil à votre console vous verrez un objet\n// contenant votre position.\nconst getDashboardInformation = () => {\n  getPosition().then((res) => {\n    console.log(res);\n    fetch(`https://api.open-meteo.com/v1/forecast?latitude=${res.lat}&longitude=${res.long}&daily=apparent_temperature_max,apparent_temperature_min&timezone=auto`)\n      .then((reponse) => reponse.json())\n      .then((data) => renderWeather(data.daily.apparent_temperature_min[0], data.daily.apparent_temperature_max[0]))\n    fetch(`http://transport.opendata.ch/v1/locations?x=${res.lat}&y=${res.long}&type=station`)\n      .then((reponse) => reponse.json())\n      .then((data) => {\n        const result = data.stations.filter((el) => el.icon === \"train\");\n\n        if (!result[0]) throw new Error(\"pas de train\");\n\n        const station = result[0].name;\n        renderStationName(station)\n        return fetch(`http://transport.opendata.ch/v1/stationboard?station=${station}&limit=5`)\n      })\n      .then((reponse) => reponse.json())\n      .then((data) => {\n        parseStationData(data).departures.forEach(element => {\n          renderTrain(element);\n        })\n      })\n      .catch(err => {\n        renderStationName(err.message);\n      })\n  })\n};\n\ngetDashboardInformation();\n\n\n"],"names":["getCoordinates","Promise","res","rej","navigator","geolocation","getCurrentPosition","renderWeather","min","max","document","querySelector","textContent","parseStationData","rawData","stationboard","departures","map","el","date","Date","stop","departure","hours","getHours","minutes","getMinutes","formattedHours","formattedMinutes","destination","to","category","station","name","renderTrain","train","board","html","insertAdjacentHTML","renderStationName","stationElement","getPosition","position","lat","coords","latitude","long","longitude","then","console","log","fetch","reponse","json","data","daily","apparent_temperature_min","apparent_temperature_max","result","stations","filter","icon","Error","forEach","element","catch","err","message"],"version":3,"file":"index.6a68993a.js.map"}